import dotenv from 'dotenv';
dotenv.config(); // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è

import { NextRequest, NextResponse } from 'next/server'; // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ç–∏–ø—ã Next.js
import { createApolloClient, Generator, Hasyx } from 'hasyx';
// import { hasyxEvent, HasuraEventPayload } from 'hasyx/lib/events'; // –£–±–∏—Ä–∞–µ–º hasyxEvent
import schema from '../../../../public/hasura-schema.json';
import Debug from '../../../../lib/debug';
import { ChessClientRole, ChessClientSide, ChessClientStatus } from '../../../../lib/chess-client';
import { v4 as uuidv4 } from 'uuid';
import { go } from '../../../../lib/go';
import { HasyxChessServer } from '../../../../lib/hasyx-chess-server';
// import { LocalChessClient } from '../../../../lib/local-chess-client'; // LocalChessClient –∑–¥–µ—Å—å –Ω–µ –Ω—É–∂–µ–Ω
import { Badma_Games } from '@/types/hasura-types';

const debug = Debug('event:ai-move');

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ–∂–∏–¥–∞–µ–º–æ–≥–æ Hasura payload
interface HasuraEventPayloadStructure {
  created_at: string;
  delivery_info: {
    current_retry: number;
    max_retries: number;
  };
  event: {
    data: {
      new: any; // –ò—Å–ø–æ–ª—å–∑—É–µ–º any, —Ç–∞–∫ –∫–∞–∫ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–∞–±–ª–∏—Ü—ã
      old: any;
    };
    op: 'INSERT' | 'UPDATE' | 'DELETE' | 'MANUAL';
    session_variables: Record<string, string>;
    trace_context?: Record<string, any>;
  };
  id: string;
  table: {
    name: string;
    schema: string;
  };
  trigger: {
    name: string;
  };
}

// –¢–∏–ø—ã –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –≤–Ω—É—Ç—Ä–∏ event.data, —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è badma_games
interface BadmaGameEventData {
  id: string;
  fen: string;
  status: string;
  side: number;
  user_id: string; // –î–æ–±–∞–≤–ª—è–µ–º user_id, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å –≤ —Ç–∞–±–ª–∏—Ü–µ –∏ —Ç—Ä–∏–≥–≥–µ—Ä–µ
}

interface AiConfig {
  id: string;
  user_id: string;
  options: {
    engine?: string;
    level?: number;
  };
}

interface JoinRecord {
  id: string;
  user_id: string;
  game_id: string;
  side: number;
  role: number;
}

interface AiMoveResult {
  from: string;
  to: string;
  promotion?: string | null;
}

/**
 * AI Move Event Handler (Raw Request)
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç POST-–∑–∞–ø—Ä–æ—Å—ã –æ—Ç Hasura Event Trigger.
 */
export async function POST(request: NextRequest) {
  debug('üîî Raw AI move event trigger received');

  let eventPayload: HasuraEventPayloadStructure;
  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ–∫—Ä–µ—Ç —Å–æ–±—ã—Ç–∏—è Hasura
    const eventSecret = process.env.HASURA_EVENT_SECRET;
    const receivedSecret = request.headers.get('x-hasura-event-secret');

    if (!eventSecret || receivedSecret !== eventSecret) {
      debug('‚ö†Ô∏è Unauthorized: Invalid or missing X-Hasura-Event-Secret');
      return NextResponse.json({ message: 'Unauthorized' }, { status: 401 });
    }

    // 2. –ü–∞—Ä—Å–∏–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–ª—é—á–∞ 'payload'
    const body = await request.json();
    if (!body || !body.payload) {
      debug('‚ö†Ô∏è Invalid payload: Missing \'payload\' key in request body');
      return NextResponse.json({ message: 'Invalid payload structure' }, { status: 400 });
    }
    eventPayload = body.payload as HasuraEventPayloadStructure;
    debug('Parsed event payload:', JSON.stringify(eventPayload, null, 2));

  } catch (error) {
    debug('‚ùå Error parsing request body or validating secret:', error);
    return NextResponse.json({ message: 'Invalid request body or headers' }, { status: 400 });
  }

  // --- –ù–ê–ß–ê–õ–û –õ–û–ì–ò–ö–ò –û–ë–†–ê–ë–û–¢–ß–ò–ö–ê (—Ä–∞–Ω–µ–µ –±—ã–ª–∞ –≤–Ω—É—Ç—Ä–∏ hasyxEvent) ---
  try {
    const { table, event } = eventPayload;
    const { op, data } = event;
    const gameData = data.new as BadmaGameEventData;
    
    debug(`üîç Game data received: id=${gameData.id}, status=${gameData.status}, fen=${gameData.fen ? 'present' : 'missing'}, side=${gameData.side}`);
    
    if (table.schema !== 'badma' || table.name !== 'games' || op !== 'UPDATE') {
      debug('‚ö†Ô∏è Skipping: Not a badma.games table update event');
      return NextResponse.json({ success: true, message: 'Skipped: Not a relevant event type' });
    }
    
    if (gameData.status !== 'ready' && gameData.status !== 'continue') {
      debug(`‚ö†Ô∏è Skipping: Game not in playable state (status: ${gameData.status})`);
      return NextResponse.json({ success: true, message: 'No AI move needed: Game not in playable state' });
    }
    
    const adminClient = createApolloClient({ 
      secret: process.env.HASURA_ADMIN_SECRET as string 
    });
    const generate = Generator(schema);
    const hasyx = new Hasyx(adminClient, generate);
    
    const currentSide = gameData.side as ChessClientSide;
    debug(`üéÆ Current game side/turn: ${currentSide}`);
    
    // --- –ó–∞–ø—Ä–æ—Å –∫ badma_joins --- 
    const joins = await hasyx.select<JoinRecord[]>({ 
      table: 'badma_joins',
      where: { 
        game_id: { _eq: gameData.id }, 
        side: { _eq: currentSide },
        role: { _eq: ChessClientRole.Player }  },
      order_by: { created_at: 'desc' },
      limit: 1,
      returning: ['id', 'user_id', 'game_id', 'side', 'role'] // –£–±–∏—Ä–∞–µ–º created_at –µ—Å–ª–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
    });
    
    if (!joins || joins.length === 0) {
      debug('‚ö†Ô∏è No join record found for the current side');
      return NextResponse.json({ success: true, message: 'No AI move needed: No join record for current side' });
    }
    
    const join = joins[0];
    const userId = join.user_id;
    debug(`üë§ User ID for current turn: ${userId}`);
    
    // --- –ó–∞–ø—Ä–æ—Å –∫ badma_ais --- 
    const aiConfigs = await hasyx.select<AiConfig[]>({ 
      table: 'badma_ais',
      where: { user_id: { _eq: userId } },
      limit: 1,
      returning: ['id', 'user_id', 'options'] // –£–±–∏—Ä–∞–µ–º timestamps –µ—Å–ª–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è
    });
    
    if (!aiConfigs || aiConfigs.length === 0) {
      debug('‚ö†Ô∏è No AI configuration found for user');
      return NextResponse.json({ success: true, message: 'No AI move needed: User has no AI configuration' });
    }
    
    const aiConfig = aiConfigs[0];
    debug(`ü§ñ Found AI configuration: ${JSON.stringify(aiConfig.options)}`);
    
    const chessServer = new HasyxChessServer(hasyx);
    
    debug('üé≤ Making AI move directly with HasyxChessServer');
    const engine = aiConfig.options?.engine || 'js-chess-engine';
    const level = aiConfig.options?.level || 0;
    debug(`üß† Using AI engine: ${engine}, level: ${level}`);
    
    const aiMove = go(gameData.fen, level);
    debug(`üìù AI suggested move: ${JSON.stringify(aiMove)}`);
    
    if (!aiMove) {
      debug(`‚ùå AI engine failed to generate a move`);
      return { 
        success: false, 
        message: 'AI engine failed to generate a move',
        error: 'No move returned from AI engine'
      };
    }
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º —Ö–æ–¥ –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ HasyxChessServer
    const clientId = uuidv4();
    const moveResult = await chessServer.request({
      operation: 'move',
      clientId: clientId,
      userId: userId,
      gameId: gameData.id,
      joinId: join.id,
      side: currentSide,
      role: ChessClientRole.Player,
      move: {
        from: aiMove.from,
        to: aiMove.to,
        promotion: aiMove.promotion === null ? undefined : aiMove.promotion
      },
      updatedAt: Date.now(),
      createdAt: Date.now()
    });
    
    if (moveResult.error) {
      debug(`‚ùå AI move failed: ${moveResult.error}`);
      return { 
        success: false, 
        message: 'AI move failed', 
        error: moveResult.error 
      };
    }
    
    debug(`‚úÖ AI move successful!`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
    const movesCheck = await hasyx.select({
      table: 'badma_moves',
      where: {
        game_id: { _eq: gameData.id },
        user_id: { _eq: userId }
      },
      order_by: { created_at: 'desc' },
      limit: 5
    });
    
    debug(`‚úì Recent moves for this game: ${JSON.stringify(movesCheck)}`);
    
    return { 
      success: true, 
      message: 'AI move successful',
      move: {
        from: aiMove.from,
        to: aiMove.to,
        promotion: aiMove.promotion
      },
      game: {
        id: gameData.id,
        newStatus: moveResult.data?.status,
        newFen: moveResult.data?.fen
      }
    };
  } catch (error) {
    debug(`‚ùå Error processing AI move: ${error instanceof Error ? error.message : String(error)}`);
    return {
      success: false,
      message: 'Error processing AI move',
      error: error instanceof Error ? error.message : String(error)
    };
  }
}); 